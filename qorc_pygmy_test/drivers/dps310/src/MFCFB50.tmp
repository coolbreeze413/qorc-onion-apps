#include <stdint.h>
#include <stdio.h>

#include "dps310.h"


uint8_t _selected_temp_sensor = 0;
uint8_t _temp_measure_rate = 0x0;
uint8_t _temp_oversampling_rate = 0x0;
uint8_t _op_mode = 0;
int16_t _c0, _c1, _c01, _c11, _c20, _c21, _c30;
int32_t _c00, _c10;

const int32_t scaling_factors[8]
	= {524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960};


// hacky sleep! fix me soon.
static void sleep_ms(uint32_t time_ms)
{
    HAL_DelayUSec(time_ms*1000);
}


uint8_t dps310_probe()
{
    uint8_t data = 0x00;
    
    HAL_I2C_Read(DPS310_DEV_ADDR, DPS310_REG_PRODUCTID, &data, 1);
    
    printf("dps310_probe: [0x%02x]\r\n", data);
    
    if(data == DPS310_VAL_PRODUCTID)
    {
        return QL_STATUS_OK;
    }
    
    return QL_STATUS_ERROR;
}


uint8_t dps310_read_coefficients()
{
    uint8_t data = 0x0;
    uint8_t coef_rdy = 0;
    uint8_t coeffs[18] = {0};
    
    // wait till the coefficients are ready    
    while(coef_rdy == 0)
    {
        HAL_I2C_Read(DPS310_DEV_ADDR, DPS310_REG_MEAS_CFG, &data, 1);
        coef_rdy = ((data >> 7) & 0x1);
        printf(".");
    }
    printf("coef_rdy\r\n");
    
    // read coefficients
    HAL_I2C_Read(DPS310_DEV_ADDR, DPS310_REG_COEF, &coeffs, 18);
    
    // calculate coefficients
    _c0 = ((uint16_t)coeffs[0] << 4) | (((uint16_t)coeffs[1] >> 4) & 0x0F);
    _c0 = twosComplement(_c0, 12);

    _c1 = twosComplement((((uint16_t)coeffs[1] & 0x0F) << 8) | coeffs[2], 12);

    _c00 = ((uint32_t)coeffs[3] << 12) | ((uint32_t)coeffs[4] << 4) |
         (((uint32_t)coeffs[5] >> 4) & 0x0F);
    _c00 = twosComplement(_c00, 20);

    _c10 = (((uint32_t)coeffs[5] & 0x0F) << 16) | ((uint32_t)coeffs[6] << 8) |
         (uint32_t)coeffs[7];
    _c10 = twosComplement(_c10, 20);

    _c01 = twosComplement(((uint16_t)coeffs[8] << 8) | (uint16_t)coeffs[9], 16);
    _c11 = twosComplement(((uint16_t)coeffs[10] << 8) | (uint16_t)coeffs[11], 16);
    _c20 = twosComplement(((uint16_t)coeffs[12] << 8) | (uint16_t)coeffs[13], 16);
    _c21 = twosComplement(((uint16_t)coeffs[14] << 8) | (uint16_t)coeffs[15], 16);
    _c30 = twosComplement(((uint16_t)coeffs[16] << 8) | (uint16_t)coeffs[17], 16);
    
    printf("_c0 :[0x%04x]\r\n", _c0);
    printf("_c1 :[0x%04x]\r\n", _c1);
    printf("_c01:[0x%04x]\r\n", _c01);
    printf("_c11:[0x%04x]\r\n", _c11);
    printf("_c20:[0x%04x]\r\n", _c20);
    printf("_c21:[0x%04x]\r\n", _c21);
    printf("_c30:[0x%04x]\r\n", _c30);
    
    printf("_c00:[0x%08x]\r\n", _c00);
    printf("_c10:[0x%08x]\r\n", _c10);
}



// pass one of DPS310_VAL_OPMODE_* macros
uint8_t dps310_set_op_mode(uint8_t op_mode)
{
    uint8_t data = (op_mode & 0x7);
  
    HAL_I2C_Write(DPS310_DEV_ADDR, DPS310_REG_MEAS_CFG, &data, 1);  
}


float dps310_measure_single_temp(uint8_t temp_oversampling_rate)
{
    uint8_t data;
    uint8_t temp_measurement_rdy = 0;
    uint8_t temp_data[3] = {0};
    int32_t tempr = 0;
    float temp_scaled = 0;
    float temp_compensated = 0;
  
    // kickoff the temperature measurement
    dps310_start_single_measurement_temp(temp_oversampling_rate);
    
    // wait
    sleep_ms(10);
    
    // check if measurement is ready:
    HAL_I2C_Read(DPS310_DEV_ADDR, DPS310_REG_MEAS_CFG, &data, 1);
    temp_measurement_rdy = ((data >> 5) & 0x1);
    if(temp_measurement_rdy)
    {
        // read temperature
        HAL_I2C_Read(DPS310_DEV_ADDR, DPS310_REG_TMP_B2, &temp_data, 3);
        
        tempr = (uint32_t)buffer[0] << 16
					| (uint32_t)buffer[1] << 8
					| (uint32_t)buffer[2];
        
        //recognize non-32-bit negative numbers
        //and convert them to 32-bit negative numbers using 2's complement
        tempr = twosComplement(tempr, 24);
        
        // scale tempr according to oversampling_rate
        temp_scaled = tempr/scaling_factors[_temp_oversampling_rate];
        
        // update temp_scaled value, can be used for next pressure compensation TODO
        
        //calculate compensated temperature
        temp_compensated = (temp_scaled * _c1) + (_c0 / 2.0);
        
        return temp_compensated;
    }
}


uint8_t dps310_start_single_measurement_temp(uint8_t temp_oversampling_rate)
{
    // check that device is IDLE first TODO
    // if(dps310_state != IDLE) RETURN
  
    // if already configured with same oversampling_rate skip this TODO
    // if(current_temp_oversampling_rate == temp_oversampling_rate) SKIP
    dps310_configure_temp(0,temp_oversampling_rate);
    
    _temp_oversampling_rate = temp_oversampling_rate;
    
    // set opmode to temperature measurement mode
    dps310_set_op_mode(DPS310_VAL_OPMODE_CMD_TMP);  
}



uint8_t dps310_configure_temp(uint8_t temp_measure_rate, uint8_t temp_oversampling_rate)
{
    uint8_t tmp_cfg_val = 0x0;
    uint8_t cfg_reg_val = 0x0;
    
    // set configuration to TMP_CFG
    tmp_cfg_val |= ((temp_oversampling_rate & 0x7) << 0);
    tmp_cfg_val |= ((temp_measure_rate & 0x7) << 4);
    tmp_cfg_val |= ((_selected_temp_sensor & 0x1) << 7);
    
    HAL_I2C_Write(DPS310_DEV_ADDR, DPS310_REG_TMP_CFG, &tmp_cfg_val, 1);
    
    // if temp_oversampling_rate > 8, set TEMP_SHIFT_ENABLE in CFG_REG, else clear it.
    HAL_I2C_Read(DPS310_DEV_ADDR, DPS310_REG_CFG_REG, &cfg_reg_val, 1);
    if(temp_oversampling_rate > 8)
    {
        cfg_reg_val |= (1 << 3);
    }
    else
    {
        cfg_reg_val &= ~(1 << 3);
    }
    
}