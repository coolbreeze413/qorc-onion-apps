// NOTE: remember to set the qorc_sdk_path in the settings.json (derive from settings.template.jsonc)
// shortcut to run task from keyboard: CTRL+p -> enter "task" and then a space ('t' 'a' 's' 'k' 'spacebar')
//      and you get the list of tasks
{
    "version": "2.0.0",
    "tasks": [
        {
            // build-m4 : invoke make to build the cortex-m4 code
            "label": "build-m4",
            "type": "shell",
            "command": "cd ${config:qorc_sdk_path} && source envsetup.sh && cd - && make",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project",
            },
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                // https://github.com/microsoft/vscode-cpptools/blob/c694184fea81845543daaf9039839425b81d197b/Extension/package.json#L264
                // to suppress warnings and show errors only, remove warnings in below regex
                // and enable the pattern: (☠ don't ☠)
                // "pattern": {
                //     "regexp": "^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
                //     "file": 1,
                //     "line": 2,
                //     "column": 3,
                //     "severity": 4,
                //     "message": 5
                // }
            },
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "panel": "new",
                "close": true
            }
        },
        {
            // clean-m4 : invoke make clean to clean the cortex-m4 code
            "label": "clean-m4",
            "type": "shell",
            "command": "cd ${config:qorc_sdk_path} && source envsetup.sh && cd - && make clean",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project"
            },
            "group": "build",
            "problemMatcher": {
                "base": "$gcc", 
            },
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            // flash-m4 : flash the m4 image into the board's flash via UART
            // !!!NOTE: ensure that python is available on PATH, and pySerial is installed!!!
            // Otherwise, run the script as in the command: "" below directly in bash shell to flash.
            "label": "flash-m4",
            "type": "shell",
            "command": "./flash_m4.sh --qorc-sdk-path=${config:qorc_sdk_path} --port=${input:serialPortFromExt}",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": true
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
            ]
        },
        {
            // load-m4 : load m4 image into EOS_S3 using OpenOCD and a selectable probe
            "label": "load-m4 (OpenOCD)",
            "type": "shell",
            "command": "./load_m4_openocd_gdb.sh --openocd-path=${config:qorc_openocd_server_path} --openocd-if-cfg=${input:openocdProbe} --gdb-path=${config:qorc_arm_toolchain_path}/arm-none-eabi-gdb",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "problemMatcher": [],
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": false
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
            ]
        },
        {
            // load-m4 : load m4 image into EOS_S3 using JLink Commander and a JLink probe
            "label": "load-m4 (JLink)",
            "type": "shell",
            "command": "./load_m4_jlink.sh --jlink-exe-path=${config:qorc_jlink_commander_path}",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": false
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
            ]
        },
        {
            // generate-json-db : generate a compile_commands.json db from the make output using 'bear'
            // this is ideally the first step to do after opening a project folder in VSCode for the first time,
            // and improves the intellisense significantly!
            // install using the regular package manager ('apt install bear' on Ubuntu)
            // recommend this one over compiledb - in some cases compiledb produced blank files.
            // https://github.com/rizsotto/Bear
            "label": "generate-json-db",
            "detail": "generate compile_commands.json using bear",
            "type": "shell",
            "command": "cd ${config:qorc_sdk_path} && source envsetup.sh && cd - && make clean && bear make",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project"
            },
            "group": "build",
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
    ],
    "inputs": [
        {
            // uses the 'augustocdias.tasks-shell-input' extension to show a nice user friendly
            // 'quickpick' dropdown in vscode for the user to select the serial port while
            // flashing the images into the board
            // - requires the extension to be installed.
            // - requires that python and pySerial are installed on the HOST machine already.
            "id": "serialPortFromExt",
            "type": "command",
            "command": "shellCommand.execute",
            "args" : {
                "command": "python ./get_serial_ports_list.py",
                "cwd": "${workspaceFolder}/.scaffolding",
                "fieldSeparator": "|",
                "description": "select serial port [>> ensure it is not opened in another program <<]",
                //"useSingleResult": true,
                "env" : {}
            },
        },
        {
            "id": "openocdProbe",
            "description": "select debug probe to use with OpenOCD",
            "type": "pickString",
            "options": [
                "jlink_swd.cfg",
                "ft2232h_swd.cfg",
                "interface/stlink-v2.cfg",
                "interface/cmsis-dap.cfg"
            ],
            "default": "jlink_swd.cfg"
        }
    ],
}