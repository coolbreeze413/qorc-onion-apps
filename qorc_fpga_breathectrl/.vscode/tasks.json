// NOTE: remember to set the qorc_sdk_path in the settings.json (derive from settings.template.jsonc)
// shortcut to run task from keyboard: CTRL+p -> enter "task" and then a space ('t' 'a' 's' 'k' 'spacebar')
//      and you get the list of tasks
{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "shell",
            // 'label' is the name of the task: https://stackoverflow.com/a/51550043
            "label": "m4-build",
            "command": "cd ${config:qorc_sdk_path} && source envsetup.sh && cd - && make",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project",
                // TODO other options to be documented
            },
            "group": {
                // this sets the current task as the 'default' build task
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": {
                "base": "$gcc", 
                //"fileLocation": ["relative", "${workspaceFolder}/GCC_Project/output"]
            },
            // auto close terminal after task exits: https://stackoverflow.com/a/67872135
            "presentation": {
                // reveal terminal only if problems encountered : 'silent'
                "reveal": "silent",
                "revealProblems": "onProblem",
                // comment below line out if you want to see the build terminal output always.
                "close": true
            }
        },
        {
            "type": "shell",
            "label": "m4-clean",
            "command": "cd ${config:qorc_sdk_path} && source envsetup.sh && cd - && make clean",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project"
            },
            "group": "build",
            "problemMatcher": {
                "base": "$gcc", 
            },
            "presentation": {
                "reveal": "silent",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            "type": "shell",
            "label": "fpga-build",
            "command": "./fpga_build.sh --qorc-sdk-path=${config:qorc_sdk_path}",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            "type": "shell",
            "label": "fpga-clean",
            "command": "./fpga_clean.sh --qorc-sdk-path=${config:qorc_sdk_path}",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "silent",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            "type": "shell",
            "label": "fpga-m4-flash",
            "command": "./fpga_m4_flash.sh --qorc-sdk-path=${config:qorc_sdk_path} --port=${input:serialPortFromExt}",
            // "args": [
            //     "${input:serialPort}"
            // ],
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": false
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "m4-build",
                "fpga-build"
            ]
        },
        {
            "type": "shell",
            "label": "fpga-m4-load (JLink)",
            "command": "./fpga_m4_load_jlink.sh --jlink-exe-path=${config:qorc_jlink_commander_path}",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": false
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "m4-build",
                "fpga-build"
            ]
        },
        {
            "type": "shell",
            "label": "fpga-m4-load (OpenOCD) JLink",
            "command": "./fpga_m4_load_openocd_gdb.sh --openocd-path=${config:qorc_openocd_server_path} --openocd-if-cfg=jlink_swd.cfg --gdb-path=${config:qorc_arm_toolchain_path}/arm-none-eabi-gdb",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": false
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "m4-build",
                "fpga-build"
            ]
        },
        // generate a compile_commands.json db from the make output using 'bear'
        // install using the regular package manager ('apt install bear' on Ubuntu)
        // recommend this one over compiledb - in some cases compiledb produced blank files.
        // https://github.com/rizsotto/Bear
        {
            "type": "shell",
            "label": "generate-json-db",
            "command": "cd ${config:qorc_sdk_path} && source envsetup.sh && cd - && make clean && bear make",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project"
            },
            "group": "build",
            "presentation": {
                "reveal": "silent",
                "revealProblems": "onProblem",
                "close": true
            }
        },
    ],
    "inputs": [
        {
            "id": "serialPortFromExt",
            "type": "command",
            "command": "shellCommand.execute",
            "args" : {
                "command": "python ./get_serial_ports_list.py",
                "cwd": "${workspaceFolder}/.scaffolding",
                "fieldSeparator": "|",
                "description": "select serial port [>> ensure it is not opened in another program <<]",
                //"useSingleResult": true,
                "env" : {}
            },
            
        }
    ],
}